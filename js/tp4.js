/*Clases, objetos y m√©todos
Crear objetos
Dificultad:  üü¢
1- Crea un objeto llamado auto que tenga algunas caracter√≠sticas como el color, marca, modelo y si est√° encendido o apagado. Crea los m√©todos necesarios para permitir encender y apagar el auto.
Output:
objeto.encender();
objeto.apagar()
auto encendido
El auto se apag√≥

const Auto = {
    color: "rojo",
    marca: "honda",
    modelo: "etios",

    encender(){
        console.log("ENCENDISTE EL AUTO")
    },

    apagar(){
        console.log("APAGASTE EL AUTO")
    },
}
*/

/*Modelando clases
Cuenta bancaria - Dificultad:  üü¢üü°
2-Escribe un programa que cree un objeto "cuenta" con las siguientes propiedades:
Una propiedad titular con el valor "Alex".
Una propiedad saldo, teniendo como valor inicial 0.
Un m√©todo ingresar() que permita a√±adir dinero a la cuenta, pasando la cantidad como par√°metro
Un m√©todo extraer() que permita retirar la cantidad pasada como par√°metro.
Un m√©todo informar() que retorne la informaci√≥n del estado de la cuenta. 
Utiliza este objeto para mostrar la descripci√≥n, ingresar y extraer dinero y volver a mostrar la descripci√≥n del estado de la cuenta.

const Cuenta={
    titular:"Alex",
    saldo:0,

    ingresar(cantidad) {
        this.saldo=this.saldo+cantidad;
        console.log(`Se ingres√≥ ${cantidad} a su cuenta. Ahora el dinero disponible es de ${this.saldo}`);
    },

    extraer (cantidad) {
        if (cantidad<=this.saldo) {
            this.saldo = this.saldo - cantidad;
            console.log(`Usted extrajo ${cantidad}, ahora su saldo es de ${this.saldo}`);
        }else{
            console.log(`No posee fondo suficiente`);
        }
    },

    informar (){
        console.log(`${this.titular}, su saldo actual es de ${this.saldo}`);
    },
}
*/

/*Rect√°ngulos
Dificultad:  üü¢
3-Escribe una clase que permita crear distintos objetos ‚Äúrect√°ngulos‚Äù, con las propiedades de alto y ancho, mas los m√©todos necesarios para modificar y mostrar sus propiedades, calcular el per√≠metro y el √°rea.

class Rectangulos {
    constructor (ancho,alto){
        this.width=ancho;
        this.heigth=alto;
    };

    modificarPropiedades(nuevoAncho,nuevoAlto){
        this.width=nuevoAncho;
        this.heigth=nuevoAlto;
        console.log(`El nuevo ancho y alto ingresado es de ${this.width} y ${this.heigth} respectivamte.`);
    };

    mostrarDimensiones(){
        console.log(`EL per√≠metro del rectangulo es:`, 2 *this.width + 2* this.heigth);
        console.log(`EL √°rea del rectangulo es:`, this.width * this.heigth);
    };

}

const Rectangulo1 = new Rectangulos(2,3);
const Rectangulo2 = new Rectangulos(4,6);
*/

/*
Producto - Dificultad:  üü¢üü°
4- Escribe una clase Producto para crear objetos. Estos objetos, deben presentar las propiedades c√≥digo, nombre y precio, adem√°s del m√©todo imprime datos, el cual escribe por pantalla los valores de sus propiedades.
Posteriormente, cree tres instancias de este objeto y gu√°rdalas en un array.
Por √∫ltimo, utilice el m√©todo imprime datos para mostrar por pantalla los valores de los tres objetos instanciados.*/

class Producto {
    constructor(codigo,nombre,precio){
        this.code=codigo;
        this.name=nombre;
        this.price=precio;
    };

    get imprimirDatos(){
        console.log(`El codigo es ${this.code}, el nombre: ${this.name} y su precio ${this.price}`);
    }
}

class Golosinas extends Producto {
    constructor(codigo,nombre,precio,marca){
        super(codigo,nombre,precio)
        this.type=marca;
    }
}
W
const Caramelos = new Golosinas (1,selva,10,arcor);
console.log(Caramelos.imprimirDatos);
const Chupetines = new Golosinas (2,chupachup,20,felfort);
console.log(Chupetines.imprimirDatos);
const Alfajores = new Golosinas (3,brownie,30,bariloche);
console.log(Alfajores.imprimirDatos);


/*
Generaciones - Dificultad:  üü¢üü°üî¥
5- Crea una clase llamada Persona que siga las siguientes condiciones:
Sus propiedades son: nombre, edad, DNI, sexo (H hombre, M mujer), peso y altura, a√±o de nacimiento. Si quieres a√±adir alguna propiedad extra puedes hacerlo.
Los m√©todos que se debe poder utilizar  son:
mostrarGeneracion: este m√©todo debe mostrar un mensaje indicando a qu√© generaci√≥n pertenece la persona creada y cual es el rasgo caracter√≠stico de esta generaci√≥n.
Para realizar este m√©todo tener en cuenta la siguiente tabla de generaciones:

esMayorDeEdad: indica si es mayor de edad, devuelve un mensaje indicando que la persona es mayor de edad.
mostrarDatos: devuelve toda la informaci√≥n del objeto.
generaDNI(): genera un n√∫mero aleatorio de 8 cifras.*/

/*
Libros - Dificultad:  üü¢üü°üî¥
6- Crear una clase Libro que contenga al menos las siguientes propiedades:
ISBN
T√≠tulo
Autor
N√∫mero de p√°ginas

Crear sus respectivos m√©todos get y set correspondientes para cada propiedad. Crear el m√©todo mostrarLibro() para mostrar la informaci√≥n relativa al libro con el siguiente formato:
‚ÄúEl libro xxx con ISBN xxx creado por el autor xxx tiene p√°ginas xxx‚Äù
Crear al menos 2 objetos libros y utilizar el m√©todo mostrarLibro();
Por √∫ltimo, indicar cu√°l de los 2 objetos ‚Äúlibros‚Äù tiene m√°s p√°ginas.*/

/*
Agenda telef√≥nica - Dificultad:  üü¢üü°üî¥
7- Nos piden realizar una agenda telef√≥nica de contactos.
Un contacto est√° definido por un nombre y un tel√©fono. Se considera que un contacto es igual a otro cuando sus nombres son iguales.
Una agenda de contactos est√° formada por un conjunto de contactos. Se podr√° crear de dos formas, indicando nosotros el tama√±o o con un tama√±o por defecto (10).
Los m√©todos de la agenda ser√°n los siguientes:
aniadirContacto(Contacto): A√±ade un contacto a la agenda, sino la agenda no puede almacenar m√°s contactos indicar por pantalla.
existeContacto(Contacto): indica si el contacto pasado existe o no.
listarContactos(): Lista toda la agenda
buscarContacto(nombre): busca un contacto por su nombre y muestra su tel√©fono.
eliminarContacto(Contacto c): elimina el contacto de la agenda, indica si se ha eliminado o no por pantalla
agendaLlena(): indica si la agenda est√° llena.
huecosLibres(): indica cu√°ntos contactos m√°s podemos ingresar.

Crea un men√∫ con opciones que ser√°n seleccionadas por el usuario usando un prompt, las salidas de las operaciones seleccionadas por el usuario se pueden mostrar en pantalla y  por consola.*/


/*
Ejercicios adicionales
8- Crea una clase llamada "Persona" que tenga las propiedades "nombre", "edad" y "profesi√≥n", y los m√©todos "saludar" y "despedirse". Luego, crea dos objetos de la clase "Persona" con diferentes valores para sus propiedades y llama a sus m√©todos "saludar" y "despedirse".*/

/*
9- Crea una clase llamada "Animal" que tenga las propiedades "nombre" y "edad", y el m√©todo "emitirSonido". Luego, crea dos clases hijas llamadas "Perro" y "Gato" que hereden de "Animal" y tengan su propio m√©todo "emitirSonido". Finalmente, crea dos objetos, uno de la clase "Perro" y otro de la clase "Gato", y llama a sus m√©todos "emitirSonido" para verificar que cada animal emite el sonido adecuado. */

/*
10- crear una clase aeropuerto con las propiedades nombreAeropuerto y lista de aviones, esta clase deber√° contener el m√©todo agregarAvion, el cual recibir√° un objeto de tipo Avi√≥n, adem√°s de un m√©todo buscarAvion el cual recibir√° el nombre de un avi√≥n y devolver√° informaci√≥n en caso de encontrarlo, si no lo encontr√≥ indicar con un mensaje.
Por su parte los aviones tendr√°n las propiedades: nombre, capacidad, destino, lista de pasajeros. Los aviones tienen el m√©todo abordar el cual permite que un pasajero suba al avi√≥n solo si hay capacidad disponible en el mismo, caso contrario mostrar un mensaje que indique que el avi√≥n est√° lleno.
Crear un objeto de tipo aeropuerto llamado "Aeropuerto Internacional", crear 3 objetos aviones con diferentes destinos. Agregar los 3 aviones al aeropuerto, buscar un avi√≥n y usar el m√©todo abordar.*/
